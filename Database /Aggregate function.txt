Aggregate function -> 
----------------------------------------------------------------
SELECT COUNT(column_name) FROM table_name WHERE condition;

SELECT COUNT(*) AS total_employees FROM employee;

+-----------------+
| total_employees |
+-----------------+
|              11 |
+-----------------+

----------------------------------------------------------------

sum() -> Adds up all the numeric values in a column.
SELECT SUM(column_name) FROM table_name WHERE condition;
--------------
SELECT SUM(salary) AS total_salary FROM employee;
SELECT SUM(salary) AS total_salary FROM employee;
+--------------+
| total_salary |
+--------------+
|      1002000 |
+--------------+
--------------------------------------------------------------------
3. AVG( )
Purpose:

Finds the average (mean) value of a numeric column.

Syntax:

SELECT AVG(column_name) FROM table_name WHERE condition;

SELECT AVG(salary) AS average_salary FROM employee;
Returns the average salary of employees.
+----------------+
| average_salary |
+----------------+
|     91090.9091 |
+----------------+

Use Case: Find average marks, average price, average income, etc
---------------------------------------------------------------

4. MAX( )
Purpose:

Finds the maximum (highest) value from a column.

Syntax:SELECT MAX(column_name) FROM table_name WHERE condition;

SELECT MAX(salary) AS highest_salary FROM employee;
+----------------+
| highest_salary |
+----------------+
|         120000 |
+----------------+

Returns the highest salary from the employee table.

Use Case: Find highest salary, highest marks, maximum price, etc.

----------------------------------------------------------------------
5. MIN( )
Purpose:

Finds the minimum (lowest) value from a column.

Syntax:
SELECT MIN(column_name) FROM table_name WHERE condition;
SELECT MIN(salary) AS lowest_salary FROM employee;
+---------------+
| lowest_salary |
+---------------+
|         65000 |
+---------------+

Returns the lowest salary.

Use Case: Find minimum marks, minimum price, lowest age, etc.
--------------------------------------------------------------
6. GROUP BY with Aggregate Functions

You can use aggregate functions with GROUP BY to perform calculations per group (like per department).

Example:
SELECT department, AVG(salary) AS avg_salary
FROM employee
GROUP BY department;

---------------------------------------------------------
7. HAVING Clause with Aggregate Functions

Used to filter the groups created by GROUP BY.

Example:
SELECT department, SUM(salary) AS total_salary
FROM employee
GROUP BY department
HAVING SUM(salary) > 200000;


----------------------------------------------------------------

| Function | Description             | Example                             |
| -------- | ----------------------- | ----------------------------------- |
| COUNT()  | Counts number of rows   | `SELECT COUNT(*) FROM employee;`    |
| SUM()    | Adds all numeric values | `SELECT SUM(salary) FROM employee;` |
| AVG()    | Finds average value     | `SELECT AVG(salary) FROM employee;` |
| MAX()    | Finds highest value     | `SELECT MAX(salary) FROM employee;` |
| MIN()    | Finds lowest value      | `SELECT MIN(salary) FROM employee;` |

